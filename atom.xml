<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>汇源果汁吖！</title>
  
  <subtitle>一点小记录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-03T12:13:23.911Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hhy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>项目部署到服务器上访问速度超级慢</title>
    <link href="http://yoursite.com/2020/09/02/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6%E8%B6%85%E7%BA%A7%E6%85%A2/"/>
    <id>http://yoursite.com/2020/09/02/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6%E8%B6%85%E7%BA%A7%E6%85%A2/</id>
    <published>2020-09-02T09:40:53.000Z</published>
    <updated>2020-09-03T12:13:23.911Z</updated>
    
    <content type="html"><![CDATA[<p>如题，昨天把项目部署到服务器上的时候出现两大问题：</p><ol><li>java -jar 运行jar包特别慢</li><li>浏览器访问页面特别慢</li></ol><a id="more"></a><p>这两个问题都可以在下面一个方法中解决</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>这个问题答案来自<a href="https://blog.csdn.net/qq_38931996/article/details/79656310">项目部署到服务器后响应速度慢</a></p><p>方案就是在/etc/hosts文件中添加上本机的主机名映射</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 HostName  //这里的主机名HostName 就是linux命令开头@后面的名字</span><br></pre></td></tr></table></figure><hr><p><a href="https://blog.csdn.net/zty1317313805/article/details/94603604">岛城小哥的文章</a>中说：</p><p>是将主机名绑定IP（及主机IP和名称映射关系，或者为设置DNS解析器）</p><p>/etc/hosts是网络中使用的主机名（即将主机名绑定IP），/etc/sysconfig/network是本机起作用，所以要使网络中使用自己设置的主机名，因此/etc/hosts此文件也要修改</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如题，昨天把项目部署到服务器上的时候出现两大问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;java -jar 运行jar包特别慢&lt;/li&gt;
&lt;li&gt;浏览器访问页面特别慢&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="bug" scheme="http://yoursite.com/tags/bug/"/>
    
      <category term="部署" scheme="http://yoursite.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>arch第四日</title>
    <link href="http://yoursite.com/2020/08/28/arch%E7%AC%AC%E5%9B%9B%E6%97%A5/"/>
    <id>http://yoursite.com/2020/08/28/arch%E7%AC%AC%E5%9B%9B%E6%97%A5/</id>
    <published>2020-08-28T09:40:53.000Z</published>
    <updated>2020-09-03T12:14:15.560Z</updated>
    
    <content type="html"><![CDATA[<p>昨晚终于把自定义布局整明白了，桌面就加了个贴在上边的面板以及屏幕下边的停靠栏添加latte-dock </p><p>然后继续安装软件</p><p>然鹅aur下载速度过慢的问题一直没有解决</p><p>尝试过网上说的添加archlinuxcn的源没有用</p><a id="more"></a><h1 id="安装telegram"><a href="#安装telegram" class="headerlink" title="安装telegram"></a>安装telegram</h1><p>aur安装实在是太太太慢了，不知道konsole能不能设置代理，反正我用chromium配合Qv2ray速度还是杠杠的。所以我在archlinux的aur网页上找到<a href="https://aur.archlinux.org/packages/telegram-desktop-bin/">telegram-desktop-bin</a>，把Sources下的所有文件下载到一个目录下然后进入该目录使用<code>makepkg -si</code> 即可直接安装</p><p>但是这样挺麻烦的，还是要找找aur下载速度太慢的解决办法</p><h1 id="终端使用代理"><a href="#终端使用代理" class="headerlink" title="终端使用代理"></a>终端使用代理</h1><p>巧了，刚刚还在说怎么在konsole里面挂梯子就看到了一篇文章–摘自<a href="https://atomlab.org/">Atomlab</a> 的<a href="https://atomlab.org/post/tools/linux-tools/">linux常用工具和软件</a></p><h3 id="proxychains"><a href="#proxychains" class="headerlink" title="proxychains"></a>proxychains</h3><p><a href="https://github.com/rofl0r/proxychains-ng">proxychains-ng</a>，能够使某一行命令全部走http（或者socks）代理。相当取巧好用的玩意儿，配合下面的privoxy食用更加舒适。</p><ul><li>Package: proxychains-ng</li><li>Github: <a href="https://github.com/rofl0r/proxychains-ng">https://github.com/rofl0r/proxychains-ng</a></li></ul><h3 id="privoxy"><a href="#privoxy" class="headerlink" title="privoxy"></a>privoxy</h3><p><a href="https://wiki.archlinux.org/index.php/Privoxy">privoxy</a>，能将socks协议代理转换成http协议并监听。配合bash环境变量，这样做能让你在终端里挂起全局代理，十分推荐的东西。</p><ul><li>Package: privoxy</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨晚终于把自定义布局整明白了，桌面就加了个贴在上边的面板以及屏幕下边的停靠栏添加latte-dock &lt;/p&gt;
&lt;p&gt;然后继续安装软件&lt;/p&gt;
&lt;p&gt;然鹅aur下载速度过慢的问题一直没有解决&lt;/p&gt;
&lt;p&gt;尝试过网上说的添加archlinuxcn的源没有用&lt;/p&gt;
    
    </summary>
    
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="ArchLinux" scheme="http://yoursite.com/tags/ArchLinux/"/>
    
  </entry>
  
  <entry>
    <title>arch第三日</title>
    <link href="http://yoursite.com/2020/08/27/arch%E7%AC%AC%E4%B8%89%E6%97%A5/"/>
    <id>http://yoursite.com/2020/08/27/arch%E7%AC%AC%E4%B8%89%E6%97%A5/</id>
    <published>2020-08-27T09:40:53.000Z</published>
    <updated>2020-09-03T12:13:59.914Z</updated>
    
    <content type="html"><![CDATA[<p>昨天想着要做的事：grub添加win10引导选项，修改登陆界面，输入法问题，美化界面，软件安装</p><a id="more"></a><h1 id="grub添加win10引导"><a href="#grub添加win10引导" class="headerlink" title="grub添加win10引导"></a>grub添加win10引导</h1><p>这个我百度了发现步骤很简单，当初安装linux的时候已经安装grub并且执行过命令<code>grub-mkconfig -o /boot/grub/grub.cfg</code> 安装archlinux的时候只会检测出archlinux，只需要在进入archlinux后再次执行该命令即可检测出win10选项。</p><h1 id="修改登陆界面"><a href="#修改登陆界面" class="headerlink" title="修改登陆界面"></a>修改登陆界面</h1><p>昨天我觉得sddm的登陆界面也太太太丑了，还不如之前的gdm好看，但是在我改了kde的主题后发现还能改登陆界面，然后我就选了个好看的没有尝试改用gdm了hhh</p><h1 id="输入法问题"><a href="#输入法问题" class="headerlink" title="输入法问题"></a>输入法问题</h1><p>明明我记得之前安装过fcitx以及fcitxconfigtool还有另外一个fcitx的啥啥啥的，还配了个文件，但是输入法里面就是找不到我也是很无奈。昨天又百度了个输入法的文章，所以就卸载fcitx按照文章改用fcitx5了，虽然一顿瞎搞后成功用上双拼不过还是挺糊涂的，以后有机会再研究研究吧</p><h1 id="kde美化"><a href="#kde美化" class="headerlink" title="kde美化"></a>kde美化</h1><p>这个问题难倒我了，总感觉网上的文章说的有点出入，反正我改的就是一塌糊涂，丑的不行，晚上回去再看看吧。kde可以1自己编辑面板布局，这就很开放了。</p><p>我还想用awesome那个插件的，但是也不知道到底咋用，还是研究的时间少了。知乎上面的帖子也还看不懂</p><h1 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h1><p>我还是不太会用aur，昨天找好的一个介绍aur的博文因为chorme书签没有同步我怎么也找不到了，写到这里突然想起来chorme插件<a href="http://googlehelper.net/">Ghelper</a>了！！！马上去拓展程序打开了</p><p>我理解的aur  –&gt; （archlinux 用户 仓库?）流程就是：下载可编译代码，进入文件夹  使用 <code>makepkg -si</code> 来制作成pkg？然后自动安装？</p><p>想安装telegram但是好像没有找到啊。</p><p>FQ软件我用的<a href="https://qv2ray.net/">Qv2ray</a>，这个在arch上面安装超级方便</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -S qv2ray  这个就是程序本身啦</span><br><span class="line">$ sudo pacman -S v2ray   qv2ray因为众所周知的原因需要用户自行下载v2ray核心，这个就是啦</span><br></pre></td></tr></table></figure><p>这里还可以说一下arch的设置开机自启动方式</p><ol><li><p>如果安装了kde可以直接在系统设置里面的开机和关机里面添加程序</p></li><li><p>在当前用户的~/.config/autostart/ 目录下面的*.Desktop文件就是自启动的软件，可以自己创建一个desktop文件放到该文件夹下面，下面是摘录自<a href="https://blog.csdn.net/leigelaile1/article/details/105755275">磊先森的博文</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line"><span class="comment"># Name ：指定快捷方式名称。</span></span><br><span class="line">Name=electronSSR</span><br><span class="line">Comment=ssr</span><br><span class="line"><span class="comment"># Exec ：应用程序可执行文件的绝对路径</span></span><br><span class="line">Exec=/home/xxx/workspace/ssr/electron-ssr-0.2.6.AppImage  </span><br><span class="line"><span class="comment"># Icon ：图标的绝对路径</span></span><br><span class="line">Icon=/home/xxx/.desktop_file/setwheel.ico</span><br><span class="line"><span class="comment">#Terminal ：指定 是否在终端窗口中运行。 true，则在终端窗口中运行。一般false</span></span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">StartupNotify=<span class="literal">true</span></span><br><span class="line"><span class="comment"># Type : 指定菜单项的类型。 此值应为以下选项之一：</span></span><br><span class="line"><span class="comment"># Application： 对于启动应用程序的菜单项，应输入此选项。</span></span><br><span class="line"><span class="comment"># Link: 对于链接到文件、文件夹或 FTP 站点的菜单项，应输入此选项Application。</span></span><br><span class="line">Type=Application</span><br><span class="line"><span class="comment"># 主要用于菜单展示归类</span></span><br><span class="line">Categories=Application;Development;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>用 <code>systemctl enable xxxx</code> 可以将xxxx软件设置为开机启动 disable取消开机启动</li></ol><p>今天的记录结束，突然想起来之前出现的问题<code>systemctl enable NetWorkManager</code> 提示我 Unit NetWorkManager not found 还是啥的，就这意思，明明我已经安装过了啊</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天想着要做的事：grub添加win10引导选项，修改登陆界面，输入法问题，美化界面，软件安装&lt;/p&gt;
    
    </summary>
    
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="ArchLinux" scheme="http://yoursite.com/tags/ArchLinux/"/>
    
  </entry>
  
  <entry>
    <title>从gnome转到kde出现问题记录</title>
    <link href="http://yoursite.com/2020/08/26/%E4%BB%8Egnome%E8%BD%AC%E5%88%B0kde%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2020/08/26/%E4%BB%8Egnome%E8%BD%AC%E5%88%B0kde%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2020-08-26T09:40:53.000Z</published>
    <updated>2020-09-03T12:11:25.525Z</updated>
    
    <content type="html"><![CDATA[<p>从gnome转到kde出现问题记录</p><p>linux是可以多个桌面同时安装的组件化系统？百度看来的</p><p>不过我没研究咋并存，我最初的想法就是：卸载gnome，安装kde不就得了</p><a id="more"></a><ol><li>卸载gnome没有卸载干净，一开始我直接用<code>pacman -R gnome</code> 卸载gnome，不记得有没有遇到依赖不能卸载了，反正就是有依赖就先卸载依赖。重启后发现桌面还是gnome的样式，而且还报错了，各种配置文件啥啥啥的。百度：用<code>pacman -Q | grep gnome</code> 来查了下上一次删除gnome没有删全的相关东西，依赖太多了自己一个个删太太太累了，百度：使用<code>pacman -Rsc packageName</code> –&gt;删除软件包和所有依赖这个软件包的程序  <font color="red">此操作递归，尽量不要跟我一样莽</font>。</li><li>其实我感觉gdm的登陆界面比sddm的登陆页面好看多了，今晚回去试试吧sddm换成gdm，其实之前试过，但是那还是gnome没有删除干净的时候。盲猜一波这些登陆界面跟桌面软件是配套的？比如gdm就是跟gnome？开头都是g哈哈哈</li><li>sddm的登陆界面早就可以正常显示了，但是输入正确的用户密码后不能进入桌面，而是重复登陆界面—————–&gt;这个问题又是难了我一天。百度好久看到了一个可能—-&gt;<font color="red">用户没有用户组！！！！！</font></li></ol><p>ok，今天的纪录结束</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从gnome转到kde出现问题记录&lt;/p&gt;
&lt;p&gt;linux是可以多个桌面同时安装的组件化系统？百度看来的&lt;/p&gt;
&lt;p&gt;不过我没研究咋并存，我最初的想法就是：卸载gnome，安装kde不就得了&lt;/p&gt;
    
    </summary>
    
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="ArchLinux" scheme="http://yoursite.com/tags/ArchLinux/"/>
    
  </entry>
  
  <entry>
    <title>2020第二次archlinux安装</title>
    <link href="http://yoursite.com/2020/08/25/2020%E7%AC%AC%E4%BA%8C%E6%AC%A1archlinux%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2020/08/25/2020%E7%AC%AC%E4%BA%8C%E6%AC%A1archlinux%E5%AE%89%E8%A3%85/</id>
    <published>2020-08-25T09:40:53.000Z</published>
    <updated>2020-09-03T12:17:57.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我为啥又想整这个了"><a href="#我为啥又想整这个了" class="headerlink" title="我为啥又想整这个了"></a>我为啥又想整这个了</h1><p>最近沉迷跟室友LOL又好久好久好久没有看书了，即使不一定能看进去多少内容，但还是觉得多看书没有错的，总比打游戏好。想直接给电脑换linux单系统，但是又怕太寂寞，我果然是个残废</p><a id="more"></a><h1 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h1><p>6月份显卡修好之后又在多多上面买了块240G的固态，当时就想着来个windows+linux双硬盘双系统，一直就在网上看archlinux很有意思，可以自己体验系统的安装过程，所以一开始选的就是archlinux，不过当时桌面都没装好不记得啥原因就放弃了，然后装了个ubuntu，把玩了几天后好像是想在github下载翻墙软件贼慢然后不开心过了几天也不知道干啥就有直接在windows10下直接格盘了</p><h1 id="archlinux安装"><a href="#archlinux安装" class="headerlink" title="archlinux安装"></a>archlinux安装</h1><p>主要还是根据archlinux的wiki来安装吧，但是里面有挺多步骤（比如分盘，格式化/）都是没有详细说明如何操作的，这个时候还是要自己再多找几份安装的博客来看看或者直接百度具体步骤咋操作。可能wiki里面也有超链接怎么操作但是我没找到</p><ul><li><p>直接在<a href="http://mirrors.163.com/">网易镜像站</a>下载archlinux的iso镜像</p></li><li><p>使用<a href="https://cn.ultraiso.net/">软碟通</a>软件打开iso写入硬盘（这里☞u盘）</p></li><li><p>重启电脑–u盘启动–进入archlinux的live环境</p></li><li><p>按照<a href="[https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)](https://wiki.archlinux.org/index.php/Installation_guide_(简体中文)">官方教程</a>来吧，直接从进入live环境那一小节开始</p></li><li><p>在这里说一下分区、格式化以及挂载：</p><ul><li><p><code>lsblk</code>命令可以用来列出所有可用块设备的信息也可以用<code>fdisk -l</code>来查询硬盘信息</p></li><li><p>因为我有两盘硬盘，所以我就直接把第二块盘在windows下删除卷了,使用<code>fdisk /dev/sda</code>     （/dev/sda是我选择的盘）来分区</p></li><li><p>我嫌麻烦所以只分了3个区：</p><ol><li>1G的efi分区</li><li>4G的交换分区</li><li>剩下所有的就是/</li><li>别问分区大小，我也不懂，按照wiki上面的我又加了点，我觉得大总比小了好？</li></ol></li><li><p>格式化三个分区</p><ul><li><p><code>mkfs.vfat -F32 /dev/sda1</code> 格式化efi分区</p></li><li><pre><code class="bash">mkswap /dev/sda2 格式化交换分区swapon /dev/sda2 激活swap分区<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - ```mkfs.ext4 <span class="regexp">/dev/</span>sda3``` 格式化/</span><br><span class="line"></span><br><span class="line">- 挂载</span><br><span class="line"></span><br><span class="line">  - ```bash</span><br><span class="line">    mount <span class="regexp">/dev/</span>sda1 <span class="regexp">/mnt/</span>boot/efi   先检查一下这个目录是否存在，没有就先创建</span><br><span class="line">    mount <span class="regexp">/dev/</span>sda3 /mnt</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li><li><p>接下来就是安装arlinux啦<code>pacstrap /mnt base linux linux-firmware</code></p></li><li><p>安装好之后生成fdtab文件<code>enfstab -U /mnt &gt;&gt; /mnt/etc/fstab</code> 百度：/etc/fstab是存放文件系统的静态信息的文件，wiki建议我们检查文件是否正确那就用<code>nano /mnt/etc/fstab</code>看一下吧</p></li><li><p><code>arch-chroot /mnt</code>切换到新安装的系统。后面继续按照wiki来就好了</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我为啥又想整这个了&quot;&gt;&lt;a href=&quot;#我为啥又想整这个了&quot; class=&quot;headerlink&quot; title=&quot;我为啥又想整这个了&quot;&gt;&lt;/a&gt;我为啥又想整这个了&lt;/h1&gt;&lt;p&gt;最近沉迷跟室友LOL又好久好久好久没有看书了，即使不一定能看进去多少内容，但还是觉得多看书没有错的，总比打游戏好。想直接给电脑换linux单系统，但是又怕太寂寞，我果然是个残废&lt;/p&gt;
    
    </summary>
    
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="ArchLinux" scheme="http://yoursite.com/tags/ArchLinux/"/>
    
  </entry>
  
  <entry>
    <title>poi使用Iterator跳过空白单元格</title>
    <link href="http://yoursite.com/2020/08/01/poi%E4%BD%BF%E7%94%A8Iterator%E8%B7%B3%E8%BF%87%E7%A9%BA%E7%99%BD%E5%8D%95%E5%85%83%E6%A0%BC/"/>
    <id>http://yoursite.com/2020/08/01/poi%E4%BD%BF%E7%94%A8Iterator%E8%B7%B3%E8%BF%87%E7%A9%BA%E7%99%BD%E5%8D%95%E5%85%83%E6%A0%BC/</id>
    <published>2020-08-01T14:57:52.000Z</published>
    <updated>2020-09-03T12:16:13.621Z</updated>
    
    <content type="html"><![CDATA[<p>poi使用Iterator跳过空白单元格</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这种情况下。每遇到空白格，cellIterator.next()跳过空白格，取空白格后面一个有内容的单元格。</span></span><br><span class="line"><span class="comment">//就好像空白格不存在一样</span></span><br><span class="line">Row row = getRow();</span><br><span class="line">Iterator&lt;Cell&gt; cellIterator = row.iterator();</span><br><span class="line"><span class="keyword">while</span>(cellIterator.hasNext())&#123;</span><br><span class="line">    Cell cell = cellIterator.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不使用迭代器，不会跳过空白单元格了。只不过获取到的空白单元格为NULL。<br>得到最后单元格个数。使用for循环，一个一个拿。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Row row = getRow();</span><br><span class="line"><span class="keyword">int</span> n = row.getLastCellNum();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="comment">//你给我个null，是不是给我找麻烦。</span></span><br><span class="line">    Cell cell = row.getCell(i);</span><br><span class="line">    <span class="keyword">if</span>(cell==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//处理空白单元格</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>————————————————<br>版权声明：本文为CSDN博主「mr_O-O」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/DHPSL/java/article/details/82418823">https://blog.csdn.net/DHPSL/java/article/details/82418823</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;poi使用Iterator跳过空白单元格&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="POI" scheme="http://yoursite.com/tags/POI/"/>
    
  </entry>
  
  <entry>
    <title>String常量过长</title>
    <link href="http://yoursite.com/2020/07/28/String%E5%B8%B8%E9%87%8F%E8%BF%87%E9%95%BF/"/>
    <id>http://yoursite.com/2020/07/28/String%E5%B8%B8%E9%87%8F%E8%BF%87%E9%95%BF/</id>
    <published>2020-07-28T09:40:53.000Z</published>
    <updated>2020-09-03T12:18:15.466Z</updated>
    
    <content type="html"><![CDATA[<p>xml字符串内容过长</p><p>同事用的eclipce可以正常执行</p><p>idea报错—&gt;</p><p>Error:(74, 66329) java: 常量字符串过长</p><a id="more"></a><p>网上的解决办法是修改idea设置—&gt;File -&gt; Settings -&gt; Build,Execution,Deployment -&gt; Compiler -&gt; Java Compiler。</p><p>然鹅我改了以后会报更多的错—&gt;</p><blockquote><p>Error:java: Internal compiler error: java.lang.Exception: java.lang.NoClassDefFoundError: org/springframework/boot/configurationprocessor/metadata/ConfigurationMetadata at org.eclipse.jdt.internal.compiler.apt.dispatch.RoundDispatcher.handleProcessor(RoundDispatcher.java:172)</p></blockquote><p>至于为什么会这样，我暂时不想研究</p><p>我用StringBuilder来创建这个长字符串来解决问题了…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;213121.....2131&quot;</span>);</span><br><span class="line">builder = builder.append(<span class="string">&quot;1231...12123&quot;</span>);</span><br><span class="line">System.out.println(builder.toString());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;xml字符串内容过长&lt;/p&gt;
&lt;p&gt;同事用的eclipce可以正常执行&lt;/p&gt;
&lt;p&gt;idea报错—&amp;gt;&lt;/p&gt;
&lt;p&gt;Error:(74, 66329) java: 常量字符串过长&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>大话设计模式</title>
    <link href="http://yoursite.com/2020/07/01/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/07/01/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-07-01T09:40:53.000Z</published>
    <updated>2020-09-03T12:18:54.834Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下《大花设计模式》的阅读</p><a id="more"></a><h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><h2 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h2><ol><li>工厂类<ol><li>工厂类产出的产品</li></ol></li></ol><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>Class BreadFactory</p><pre><code>public static Bread createBread(参数)&#123;</code></pre><p>​            根据参数的不同，返回不同的面包</p><p>​            return new Bread();</p><p>}</p><h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p><strong>定义了算法家族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化不会影响使用算法的客户</strong></p><p>我的理解–&gt;利用多态</p><h2 id="形式："><a href="#形式：" class="headerlink" title="形式："></a>形式：</h2><p>方法(策略)</p><h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><p>Class person{</p><p>​        Food food;</p><p>​        eat(Food food)</p><p>}</p><p>Class Food{}</p><p>Class Bread extends Food{}</p><p>Class Milk extends Food{}</p><p>客户端需要识别person、food两个类</p><h1 id="策略模式与简单工厂模式结合"><a href="#策略模式与简单工厂模式结合" class="headerlink" title="策略模式与简单工厂模式结合"></a>策略模式与简单工厂模式结合</h1><p>Class person{</p><p>​        eat(参数){</p><p>​                根据参数的不同先创建（拿出）不同的食物，然后吃</p><p>}</p><p>}</p><p>客户端只需要识别person一个类</p><h1 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h1><p><strong>就一个类而言，应该仅有一个引起他变化的原因</strong></p><p>使程序 <strong>易维护、易拓展、易复用、灵活多样</strong></p><p>职责过多，相当于把这些功能耦合在一起，一个职责的变化可能会削弱这个类完成其他职责的能力</p><h1 id="开放-封闭原则"><a href="#开放-封闭原则" class="headerlink" title="开放-封闭原则"></a>开放-封闭原则</h1><p><strong>软件实体（类，模块，函数）应该可以拓展但不可以修改</strong></p><p><strong>对于拓展是开放的，对于修改是封闭的</strong></p><p>–&gt; 利用继承实现该原则</p><h1 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h1><p><strong>1. 高层模块不应该依赖底层模块，两者都应该依赖抽象</strong></p><p><strong>2. 抽象不依赖细节，细节应该依赖抽象</strong></p><h2 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h2><p>子类型必须能够替换掉他们的父类型</p><p><strong>依赖倒转可以说是面向对象设计的标志，所有依赖终止于抽象类或者接口</strong></p><h1 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h1><p>动态的给一个对象添加一些额外的职责，比生成子类更加灵活</p><h2 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h2><p>class Person(){}</p><p>Class Finery(){</p><p>​    Person person</p><p>​    void add(Person person){</p><p>​        给person穿衣服</p><p>}</p><p>}</p><p>class Yifu() extends Finery(){}</p><p>Yifu yifu = new Yifu();</p><p>yifu.add(new Person());</p><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>为其他对象提供一种代理以控制对该对象的访问</p><p><strong>我的理解</strong>  —&gt;   人在海外，提供代理（？？？这里可能描述不对），国内的朋友可以帮我在国内买房子，代理可以实现跟我相同的功能</p><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ol><li>远程代理</li><li>虚拟代理</li><li>安全代理</li><li>智能指引</li></ol><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>定义一个用于创建对象的接口，让子类决定实例化哪一个对象。工厂方法使一个类的实例化延时到子类。</p><h2 id="工厂模式与简单工厂模式"><a href="#工厂模式与简单工厂模式" class="headerlink" title="工厂模式与简单工厂模式"></a>工厂模式与简单工厂模式</h2><p>简单工厂模式添加新的类型方法时需要对工厂类做出修改，违背了开放-封闭原则</p><h1 id="形式-1"><a href="#形式-1" class="headerlink" title="形式"></a>形式</h1><p>工厂模式类似一个父类，对象的创建交给子类来做</p><h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下《大花设计模式》的阅读&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java spliit</title>
    <link href="http://yoursite.com/2020/06/16/Java%20spliit/"/>
    <id>http://yoursite.com/2020/06/16/Java%20spliit/</id>
    <published>2020-06-16T09:40:53.000Z</published>
    <updated>2020-09-03T12:19:29.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-spliit"><a href="#Java-spliit" class="headerlink" title="Java spliit"></a>Java spliit</h1><h2 id="split-regix-limit"><a href="#split-regix-limit" class="headerlink" title="split(regix,limit)"></a>split(regix,limit)</h2><ul><li><p>limit 默认0</p><ul><li>0|2|             —&gt;   会分割出2个，最后一个|后面的“”不分割</li></ul></li><li><p>limit &lt; 0 </p><ul><li>0|2|             —&gt;   会分割出3个，分割所有的</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-spliit&quot;&gt;&lt;a href=&quot;#Java-spliit&quot; class=&quot;headerlink&quot; title=&quot;Java spliit&quot;&gt;&lt;/a&gt;Java spliit&lt;/h1&gt;&lt;h2 id=&quot;split-regix-limit&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Socket通信</title>
    <link href="http://yoursite.com/2020/06/11/Socket%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2020/06/11/Socket%E9%80%9A%E4%BF%A1/</id>
    <published>2020-06-11T14:57:52.000Z</published>
    <updated>2020-06-13T03:52:25.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Socket通信"><a href="#Socket通信" class="headerlink" title="Socket通信"></a>Socket通信</h1><p>摘自：<a href="https://zhuanlan.zhihu.com/p/58652542">Java Socket 编程</a></p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><ol><li>创建socket服务端，绑定监听端口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><ol start="2"><li>使用拥塞算法监听端口，客户端与服务端连接后，新建一个socket来连接客户端与服务端</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Socket clientSocket = serverSocket.accept();</span><br></pre></td></tr></table></figure><ol start="3"><li>通讯，直至socket将流关闭</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PrintWriter pw = <span class="keyword">new</span> PrintWriter(clientSocket.getOutputStream(),<span class="keyword">true</span>);</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(clientSocket.getInputStream()));</span><br></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><ol><li>客户端知道socket服务端ip地址以及端口号</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Socket clientSocket = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6666</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>上面的构造方法只在服务器接受连接时才实例一个新socket，连接失败,会抛出<strong>连接拒接异常(connection refused exception)</strong>. 新socket创建成功时, 我们可以获得与服务器通讯的输入和输出流.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PrintWriter pw = <span class="keyword">new</span> PrintWriter(clientSocket.getOutputStream(),<span class="keyword">true</span>);</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(clientSocket.getInputStream));</span><br></pre></td></tr></table></figure><h2 id="我之前的误解"><a href="#我之前的误解" class="headerlink" title="我之前的误解"></a>我之前的误解</h2><ol><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br></pre></td></tr></table></figure></li></ol><p>客户端、服务端的PrintWriter、BufferedReader都是针对socket的输入输出，</p><p>只有在PrintWriter准备写数据的时候才可以自定义输入消息</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Socket通信&quot;&gt;&lt;a href=&quot;#Socket通信&quot; class=&quot;headerlink&quot; title=&quot;Socket通信&quot;&gt;&lt;/a&gt;Socket通信&lt;/h1&gt;&lt;p&gt;摘自：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/58652542&quot;&gt;Java Socket 编程&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;服务器&quot;&gt;&lt;a href=&quot;#服务器&quot; class=&quot;headerlink&quot; title=&quot;服务器&quot;&gt;&lt;/a&gt;服务器&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;创建socket服务端，绑定监听端口&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ServerSocket serverSocket = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ServerSocket(&lt;span class=&quot;number&quot;&gt;6666&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Socket" scheme="http://yoursite.com/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>清除List内容遇到的坑</title>
    <link href="http://yoursite.com/2020/06/09/%E6%B8%85%E9%99%A4List%E5%86%85%E5%AE%B9%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2020/06/09/%E6%B8%85%E9%99%A4List%E5%86%85%E5%AE%B9%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</id>
    <published>2020-06-09T14:57:53.000Z</published>
    <updated>2020-09-03T12:20:32.587Z</updated>
    
    <content type="html"><![CDATA[<p>使用for循环删除List内元素可能会出错</p><a id="more"></a><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;String&gt;&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; headList = Lists.newArrayList();</span><br><span class="line">        List&lt;String&gt; bodyList = Lists.newArrayList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; results.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">12</span>) &#123;</span><br><span class="line">                headList.add(results[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ((i - <span class="number">12</span>) % <span class="number">22</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    lists.add(bodyList);</span><br><span class="line"><span class="comment">//                    bodyList = new ArrayList&lt;&gt;();</span></span><br><span class="line">                    bodyList.clear();</span><br><span class="line">                &#125;</span><br><span class="line">                bodyList.add(results[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        lists.add(headList);</span><br><span class="line">        System.out.println(lists);</span><br></pre></td></tr></table></figure><p>结果：</p><p><code>[[0], [0], [1123, 球球, fee, 20200604, 1, piciho, 1, 123123.12, 1, 123123.12, 0, 0]]</code></p><h1 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h1><p>1.用list.clear()方法清空list；用此方法，其它引用该list的值也会变成空。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list2 = list;<span class="comment">//此时list2有值</span></span><br><span class="line">list.clear();<span class="comment">//先将list赋值给list2，再清空，此时list和list2都为空</span></span><br></pre></td></tr></table></figure><p>2.用list = null来清空list</p><p>3.new ArrayList()来清空list<br>————————————————<br>版权声明：本文为CSDN博主「聆听。。花开雨落」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/sofeware333/java/article/details/92783177">https://blog.csdn.net/sofeware333/java/article/details/92783177</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用for循环删除List内元素可能会出错&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>OnJava8记录</title>
    <link href="http://yoursite.com/2020/06/09/OnJava8%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2020/06/09/OnJava8%E8%AE%B0%E5%BD%95/</id>
    <published>2020-06-09T14:57:52.000Z</published>
    <updated>2020-06-13T03:51:44.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、对象的概念"><a href="#一、对象的概念" class="headerlink" title="一、对象的概念"></a>一、对象的概念</h1><ul><li>我们可以一开始使用 LinkedList 构建程序，在优化系统性能时改用 ArrayList。通过对 List 接口的抽象，我们可以很容易地将 LinkedList 改为 ArrayList。</li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、对象的概念&quot;&gt;&lt;a href=&quot;#一、对象的概念&quot; class=&quot;headerlink&quot; title=&quot;一、对象的概念&quot;&gt;&lt;/a&gt;一、对象的概念&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;我们可以一开始使用 LinkedList 构建程序，在优化系统性能时改用 ArrayLi
      
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="书单" scheme="http://yoursite.com/tags/%E4%B9%A6%E5%8D%95/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Redis:Could not get a resource from the pool</title>
    <link href="http://yoursite.com/2020/06/09/Redis:Could%20not%20get%20a%20resource%20from%20the%20pool%20/"/>
    <id>http://yoursite.com/2020/06/09/Redis:Could%20not%20get%20a%20resource%20from%20the%20pool%20/</id>
    <published>2020-06-09T14:57:52.000Z</published>
    <updated>2020-06-13T03:52:13.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><a id="more"></a><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">redis<span class="selector-class">.clients</span><span class="selector-class">.jedis</span><span class="selector-class">.exceptions</span><span class="selector-class">.JedisConnectionException</span>: Could not get <span class="selector-tag">a</span> resource from the pool</span><br><span class="line">at redis<span class="selector-class">.clients</span><span class="selector-class">.util</span><span class="selector-class">.Pool</span>.getResource(Pool<span class="selector-class">.java</span>:<span class="number">53</span>)</span><br><span class="line">at redis<span class="selector-class">.clients</span><span class="selector-class">.jedis</span><span class="selector-class">.JedisPool</span>.getResource(JedisPool<span class="selector-class">.java</span>:<span class="number">226</span>)</span><br><span class="line">at com<span class="selector-class">.imooc</span><span class="selector-class">.miaosha</span><span class="selector-class">.redis</span><span class="selector-class">.RedisService</span>.get(RedisService<span class="selector-class">.java</span>:<span class="number">26</span>)</span><br><span class="line">at com<span class="selector-class">.imooc</span><span class="selector-class">.miaosha</span><span class="selector-class">.controller</span><span class="selector-class">.SampleController</span>.redisGet(SampleController<span class="selector-class">.java</span>:<span class="number">35</span>)</span><br><span class="line">at sun<span class="selector-class">.reflect</span><span class="selector-class">.NativeMethodAccessorImpl</span>.invoke0(Native Method)</span><br><span class="line">at sun<span class="selector-class">.reflect</span><span class="selector-class">.NativeMethodAccessorImpl</span>.invoke(NativeMethodAccessorImpl<span class="selector-class">.java</span>:<span class="number">62</span>)</span><br><span class="line">at sun<span class="selector-class">.reflect</span><span class="selector-class">.DelegatingMethodAccessorImpl</span>.invoke(DelegatingMethodAccessorImpl<span class="selector-class">.java</span>:<span class="number">43</span>)</span><br><span class="line">at java<span class="selector-class">.lang</span><span class="selector-class">.reflect</span><span class="selector-class">.Method</span>.invoke(Method<span class="selector-class">.java</span>:<span class="number">498</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.method</span><span class="selector-class">.support</span><span class="selector-class">.InvocableHandlerMethod</span>.doInvoke(InvocableHandlerMethod<span class="selector-class">.java</span>:<span class="number">205</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.method</span><span class="selector-class">.support</span><span class="selector-class">.InvocableHandlerMethod</span>.invokeForRequest(InvocableHandlerMethod<span class="selector-class">.java</span>:<span class="number">133</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.servlet</span><span class="selector-class">.mvc</span><span class="selector-class">.method</span><span class="selector-class">.annotation</span><span class="selector-class">.ServletInvocableHandlerMethod</span>.invokeAndHandle(ServletInvocableHandlerMethod<span class="selector-class">.java</span>:<span class="number">97</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.servlet</span><span class="selector-class">.mvc</span><span class="selector-class">.method</span><span class="selector-class">.annotation</span><span class="selector-class">.RequestMappingHandlerAdapter</span>.invokeHandlerMethod(RequestMappingHandlerAdapter<span class="selector-class">.java</span>:<span class="number">827</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.servlet</span><span class="selector-class">.mvc</span><span class="selector-class">.method</span><span class="selector-class">.annotation</span><span class="selector-class">.RequestMappingHandlerAdapter</span>.handleInternal(RequestMappingHandlerAdapter<span class="selector-class">.java</span>:<span class="number">738</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.servlet</span><span class="selector-class">.mvc</span><span class="selector-class">.method</span><span class="selector-class">.AbstractHandlerMethodAdapter</span>.handle(AbstractHandlerMethodAdapter<span class="selector-class">.java</span>:<span class="number">85</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.servlet</span><span class="selector-class">.DispatcherServlet</span>.doDispatch(DispatcherServlet<span class="selector-class">.java</span>:<span class="number">967</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.servlet</span><span class="selector-class">.DispatcherServlet</span>.doService(DispatcherServlet<span class="selector-class">.java</span>:<span class="number">901</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.servlet</span><span class="selector-class">.FrameworkServlet</span>.processRequest(FrameworkServlet<span class="selector-class">.java</span>:<span class="number">970</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.servlet</span><span class="selector-class">.FrameworkServlet</span>.doGet(FrameworkServlet<span class="selector-class">.java</span>:<span class="number">861</span>)</span><br><span class="line">at javax<span class="selector-class">.servlet</span><span class="selector-class">.http</span><span class="selector-class">.HttpServlet</span>.service(HttpServlet<span class="selector-class">.java</span>:<span class="number">635</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.servlet</span><span class="selector-class">.FrameworkServlet</span>.service(FrameworkServlet<span class="selector-class">.java</span>:<span class="number">846</span>)</span><br><span class="line">at javax<span class="selector-class">.servlet</span><span class="selector-class">.http</span><span class="selector-class">.HttpServlet</span>.service(HttpServlet<span class="selector-class">.java</span>:<span class="number">742</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.ApplicationFilterChain</span>.internalDoFilter(ApplicationFilterChain<span class="selector-class">.java</span>:<span class="number">231</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.ApplicationFilterChain</span>.doFilter(ApplicationFilterChain<span class="selector-class">.java</span>:<span class="number">166</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.tomcat</span><span class="selector-class">.websocket</span><span class="selector-class">.server</span><span class="selector-class">.WsFilter</span>.doFilter(WsFilter<span class="selector-class">.java</span>:<span class="number">52</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.ApplicationFilterChain</span>.internalDoFilter(ApplicationFilterChain<span class="selector-class">.java</span>:<span class="number">193</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.ApplicationFilterChain</span>.doFilter(ApplicationFilterChain<span class="selector-class">.java</span>:<span class="number">166</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.filter</span><span class="selector-class">.RequestContextFilter</span>.doFilterInternal(RequestContextFilter<span class="selector-class">.java</span>:<span class="number">99</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.filter</span><span class="selector-class">.OncePerRequestFilter</span>.doFilter(OncePerRequestFilter<span class="selector-class">.java</span>:<span class="number">107</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.ApplicationFilterChain</span>.internalDoFilter(ApplicationFilterChain<span class="selector-class">.java</span>:<span class="number">193</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.ApplicationFilterChain</span>.doFilter(ApplicationFilterChain<span class="selector-class">.java</span>:<span class="number">166</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.filter</span><span class="selector-class">.HttpPutFormContentFilter</span>.doFilterInternal(HttpPutFormContentFilter<span class="selector-class">.java</span>:<span class="number">108</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.filter</span><span class="selector-class">.OncePerRequestFilter</span>.doFilter(OncePerRequestFilter<span class="selector-class">.java</span>:<span class="number">107</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.ApplicationFilterChain</span>.internalDoFilter(ApplicationFilterChain<span class="selector-class">.java</span>:<span class="number">193</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.ApplicationFilterChain</span>.doFilter(ApplicationFilterChain<span class="selector-class">.java</span>:<span class="number">166</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.filter</span><span class="selector-class">.HiddenHttpMethodFilter</span>.doFilterInternal(HiddenHttpMethodFilter<span class="selector-class">.java</span>:<span class="number">81</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.filter</span><span class="selector-class">.OncePerRequestFilter</span>.doFilter(OncePerRequestFilter<span class="selector-class">.java</span>:<span class="number">107</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.ApplicationFilterChain</span>.internalDoFilter(ApplicationFilterChain<span class="selector-class">.java</span>:<span class="number">193</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.ApplicationFilterChain</span>.doFilter(ApplicationFilterChain<span class="selector-class">.java</span>:<span class="number">166</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.filter</span><span class="selector-class">.CharacterEncodingFilter</span>.doFilterInternal(CharacterEncodingFilter<span class="selector-class">.java</span>:<span class="number">197</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.filter</span><span class="selector-class">.OncePerRequestFilter</span>.doFilter(OncePerRequestFilter<span class="selector-class">.java</span>:<span class="number">107</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.ApplicationFilterChain</span>.internalDoFilter(ApplicationFilterChain<span class="selector-class">.java</span>:<span class="number">193</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.ApplicationFilterChain</span>.doFilter(ApplicationFilterChain<span class="selector-class">.java</span>:<span class="number">166</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.StandardWrapperValve</span>.invoke(StandardWrapperValve<span class="selector-class">.java</span>:<span class="number">199</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.StandardContextValve</span>.invoke(StandardContextValve<span class="selector-class">.java</span>:<span class="number">96</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.authenticator</span><span class="selector-class">.AuthenticatorBase</span>.invoke(AuthenticatorBase<span class="selector-class">.java</span>:<span class="number">478</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.StandardHostValve</span>.invoke(StandardHostValve<span class="selector-class">.java</span>:<span class="number">140</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.valves</span><span class="selector-class">.ErrorReportValve</span>.invoke(ErrorReportValve<span class="selector-class">.java</span>:<span class="number">81</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.StandardEngineValve</span>.invoke(StandardEngineValve<span class="selector-class">.java</span>:<span class="number">87</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.connector</span><span class="selector-class">.CoyoteAdapter</span>.service(CoyoteAdapter<span class="selector-class">.java</span>:<span class="number">342</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.coyote</span><span class="selector-class">.http11</span><span class="selector-class">.Http11Processor</span>.service(Http11Processor<span class="selector-class">.java</span>:<span class="number">803</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.coyote</span><span class="selector-class">.AbstractProcessorLight</span>.process(AbstractProcessorLight<span class="selector-class">.java</span>:<span class="number">66</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.coyote</span>.AbstractProtocol<span class="variable">$ConnectionHandler</span>.process(AbstractProtocol<span class="selector-class">.java</span>:<span class="number">868</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.tomcat</span><span class="selector-class">.util</span><span class="selector-class">.net</span>.NioEndpoint<span class="variable">$SocketProcessor</span>.doRun(NioEndpoint<span class="selector-class">.java</span>:<span class="number">1459</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.tomcat</span><span class="selector-class">.util</span><span class="selector-class">.net</span><span class="selector-class">.SocketProcessorBase</span>.run(SocketProcessorBase<span class="selector-class">.java</span>:<span class="number">49</span>)</span><br><span class="line">at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.ThreadPoolExecutor</span>.runWorker(ThreadPoolExecutor<span class="selector-class">.java</span>:<span class="number">1149</span>)</span><br><span class="line">at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span>.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor<span class="selector-class">.java</span>:<span class="number">624</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.tomcat</span><span class="selector-class">.util</span><span class="selector-class">.threads</span>.TaskThread<span class="variable">$WrappingRunnable</span>.run(TaskThread<span class="selector-class">.java</span>:<span class="number">61</span>)</span><br><span class="line">at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span>.run(Thread<span class="selector-class">.java</span>:<span class="number">748</span>)</span><br><span class="line">Caused by: redis<span class="selector-class">.clients</span><span class="selector-class">.jedis</span><span class="selector-class">.exceptions</span><span class="selector-class">.JedisConnectionException</span>: java<span class="selector-class">.net</span><span class="selector-class">.ConnectException</span>: Connection refused (Connection refused)</span><br><span class="line">at redis<span class="selector-class">.clients</span><span class="selector-class">.jedis</span><span class="selector-class">.Connection</span>.connect(Connection<span class="selector-class">.java</span>:<span class="number">207</span>)</span><br><span class="line">at redis<span class="selector-class">.clients</span><span class="selector-class">.jedis</span><span class="selector-class">.BinaryClient</span>.connect(BinaryClient<span class="selector-class">.java</span>:<span class="number">93</span>)</span><br><span class="line">at redis<span class="selector-class">.clients</span><span class="selector-class">.jedis</span><span class="selector-class">.BinaryJedis</span>.connect(BinaryJedis<span class="selector-class">.java</span>:<span class="number">1767</span>)</span><br><span class="line">at redis<span class="selector-class">.clients</span><span class="selector-class">.jedis</span><span class="selector-class">.JedisFactory</span>.makeObject(JedisFactory<span class="selector-class">.java</span>:<span class="number">106</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.pool2</span><span class="selector-class">.impl</span><span class="selector-class">.GenericObjectPool</span>.create(GenericObjectPool<span class="selector-class">.java</span>:<span class="number">868</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.pool2</span><span class="selector-class">.impl</span><span class="selector-class">.GenericObjectPool</span>.borrowObject(GenericObjectPool<span class="selector-class">.java</span>:<span class="number">435</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.pool2</span><span class="selector-class">.impl</span><span class="selector-class">.GenericObjectPool</span>.borrowObject(GenericObjectPool<span class="selector-class">.java</span>:<span class="number">363</span>)</span><br><span class="line">at redis<span class="selector-class">.clients</span><span class="selector-class">.util</span><span class="selector-class">.Pool</span>.getResource(Pool<span class="selector-class">.java</span>:<span class="number">49</span>)</span><br><span class="line">... <span class="number">57</span> more</span><br><span class="line">Caused by: java<span class="selector-class">.net</span><span class="selector-class">.ConnectException</span>: Connection refused (Connection refused)</span><br><span class="line">at java<span class="selector-class">.net</span><span class="selector-class">.PlainSocketImpl</span>.socketConnect(Native Method)</span><br><span class="line">at java<span class="selector-class">.net</span><span class="selector-class">.AbstractPlainSocketImpl</span>.doConnect(AbstractPlainSocketImpl<span class="selector-class">.java</span>:<span class="number">350</span>)</span><br><span class="line">at java<span class="selector-class">.net</span><span class="selector-class">.AbstractPlainSocketImpl</span>.connectToAddress(AbstractPlainSocketImpl<span class="selector-class">.java</span>:<span class="number">206</span>)</span><br><span class="line">at java<span class="selector-class">.net</span><span class="selector-class">.AbstractPlainSocketImpl</span>.connect(AbstractPlainSocketImpl<span class="selector-class">.java</span>:<span class="number">188</span>)</span><br><span class="line">at java<span class="selector-class">.net</span><span class="selector-class">.SocksSocketImpl</span>.connect(SocksSocketImpl<span class="selector-class">.java</span>:<span class="number">392</span>)</span><br><span class="line">at java<span class="selector-class">.net</span><span class="selector-class">.Socket</span>.connect(Socket<span class="selector-class">.java</span>:<span class="number">589</span>)</span><br><span class="line">at redis<span class="selector-class">.clients</span><span class="selector-class">.jedis</span><span class="selector-class">.Connection</span>.connect(Connection<span class="selector-class">.java</span>:<span class="number">184</span>)</span><br><span class="line">... <span class="number">64</span> more</span><br></pre></td></tr></table></figure><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul><li>没有释放 redis 池中的资源</li><li>redis pool 配置过小</li><li>无法连接到 redis</li></ul><h3 id="没有释放-redis-池中的资源"><a href="#没有释放-redis-池中的资源" class="headerlink" title="没有释放 redis 池中的资源"></a>没有释放 redis 池中的资源</h3><h3 id="redis-pool-配置过小"><a href="#redis-pool-配置过小" class="headerlink" title="redis pool 配置过小"></a>redis pool 配置过小</h3><h3 id="无法连接到-redis"><a href="#无法连接到-redis" class="headerlink" title="无法连接到 redis"></a>无法连接到 redis</h3><ul><li><p>由于防火墙原因无法连接到 Redis;</p><ol><li>服务器防火墙入站规则。</li></ol><ul><li>通过 java 无法连接 redis，而使用 redis-cli 是可以的。首先检查网络，可以 ping 通。检查端口<code>netstat -tunlp |grep 6379</code>状态正常,redis.conf 中的 bind 的配置为 bind 0.0.0.0 即所有地址均可连接，然后./redis-server ./redis.conf 指定配置文件启动测试，仍然无法连接，继续排查，有网友说可能是服务器防火墙的问题，咱关了防火墙试下,<code>systemctl stop firewalld.service</code> 关闭防火墙.我的虚拟机是 centos7 的默认防火墙，7 以下默认是 iptables 的，再测试，OK，连上了。<br><code>systemctl stop firewalld.service #停止firewall</code><br><code>systemctl disable firewalld.service #禁止firewall开机启动</code><br>执行这段命令就可以开放 6379 端口了<br><code>firewall-cmd --zone=public --add-port=6379/tcp --permanent</code><br>发现还是连不上。</li><li>ifconfig 查看 ip，一个个 ping。发现只有 10.xxx.xxx.xxx 的才可以 ping 通。将 application.properties 内的 redis 配置的 host 改为该地址。再运行项目，不报 redis 错了。</li></ul></li></ul><ol><li>访问 Redis 的应用程序所在主机的出站规则。</li></ol><ul><li>IP 地址或端口错误</li></ul><p>借鉴地址 1[<a href="https://www.jianshu.com/p/53c05871fd36]">https://www.jianshu.com/p/53c05871fd36]</a><br>借鉴地址 2[<a href="https://blog.csdn.net/m0_37837382/article/details/80999977]">https://blog.csdn.net/m0_37837382/article/details/80999977]</a><br>借鉴地址 3[<a href="https://blog.csdn.net/qq_33326449/article/details/80460521]">https://blog.csdn.net/qq_33326449/article/details/80460521]</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;报错&quot;&gt;&lt;a href=&quot;#报错&quot; class=&quot;headerlink&quot; title=&quot;报错&quot;&gt;&lt;/a&gt;报错&lt;/h1&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
      <category term="bug" scheme="http://yoursite.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>Java并发</title>
    <link href="http://yoursite.com/2020/06/09/Java%E5%B9%B6%E5%8F%91/"/>
    <id>http://yoursite.com/2020/06/09/Java%E5%B9%B6%E5%8F%91/</id>
    <published>2020-06-09T14:57:52.000Z</published>
    <updated>2020-09-03T12:14:56.061Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并发基础"><a href="#并发基础" class="headerlink" title="并发基础"></a>并发基础</h1><h2 id="创建线程的三种方式"><a href="#创建线程的三种方式" class="headerlink" title="创建线程的三种方式"></a>创建线程的三种方式</h2><ol><li>extends Thread</li><li>implements Runnable</li><li>implements Callable</li></ol><h3 id="三种方式比较"><a href="#三种方式比较" class="headerlink" title="三种方式比较"></a>三种方式比较</h3><ol><li>继承实现：当前线程直接使用this，不需Thread.currentThread；Java只能单继承，任务与代码没有分离，没有返回值</li><li>Runnable：多线程进行同一任务只需要一份代码；没有返回值</li><li>Callable：有返回值<a id="more"></a></li></ol><hr><p>总结：</p><p>使用继承方便传参，通过设置子类的私有属性，set方法，构造方法进行参数传递，Runnable只能使用主线程声明的final变量；但Java单继承，继承了Thread后无法继承其他类。继承和Runnable都没有返回值，Callable–FutureTask可以有返回值</p><h2 id="线程唤醒与等待"><a href="#线程唤醒与等待" class="headerlink" title="线程唤醒与等待"></a>线程唤醒与等待</h2><p><font color=red size=3><strong>为什么是用共享变量(锁对象)的wait()而不是线程对象的wait()？</strong></font></p><p>为何这三个不是Thread类声明中的方法，而是Object类中声明的方法（当然由于Thread类继承了Object类，所以Thread也可以调用者三个方法）？其实这个问题很简单，由于每个对象都拥有monitor（即锁），所以让当前线程等待某个对象的锁，当然应该通过这个对象来操作了。而不是用当前线程来操作，<strong>因为当前线程可能会等待多个线程的锁，</strong>如果通过线程来操作，就非常复杂了。</p><p>=======================================================<br>上面已经提到，如果调用某个对象的wait()方法，当前线程必须拥有这个对象的monitor（即锁），因此调用wait()方法必须在同步块或者同步方法中进行（synchronized块或者synchronized方法）。如果当前线程没有这个对象的锁就调用wait()方法，则会抛出IllegalMonitorStateException.</p><p>=======================================================<br>调用某个对象的wait()方法，相当于让当前线程交出（释放）此对象的monitor，然后进入等待状态，等待后续再次获得此对象的锁（Thread类中的sleep方法使当前线程暂停执行一段时间，从而让其他线程有机会继续执行，但它并不释放对象锁）；<br>————————————————<br>版权声明：本文为CSDN博主「Demon_HL」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/Demon_HL/java/article/details/104984117">https://blog.csdn.net/Demon_HL/java/article/details/104984117</a></p><p>wait()、notify()、notifyAll()都是针对共享变量的等待与唤醒，一个共享变量可以被多个线程所等待，唤醒哪个变量是随机的。只有获取到共享变量的监视器锁的线程才可以继续运行</p><h2 id="等待线程执行终止-join"><a href="#等待线程执行终止-join" class="headerlink" title="等待线程执行终止 join()"></a>等待线程执行终止 join()</h2><p>A线程调用B线程的join()方法，A线程阻塞等待B线程执行完毕，中途若其他线程调用A线程的interrupt()则报异常</p><h2 id="线程睡眠-sleep"><a href="#线程睡眠-sleep" class="headerlink" title="线程睡眠 sleep()"></a>线程睡眠 sleep()</h2><ol><li>sleep()是Thread的方法而不是Object的方法</li><li>线程调用sleep()让出执行权（<font color="red">这里的执行权是啥意思。如果线程在使用cpu则让出，如果没有在使用cpu则不参与cpu调度？</font>）不参与cpu调度</li><li>不会让出已拥有的监视器资源，比如监视器锁。</li><li>指定时间过后线程进入就绪状态，重新参与cpu的调度。</li><li>睡眠期间被调用该线程的interrupt()回报异常</li></ol><p>sleep(-1)报错</p><h2 id="让出cpu使用权-yield"><a href="#让出cpu使用权-yield" class="headerlink" title="让出cpu使用权  yield()"></a>让出cpu使用权  yield()</h2><ol><li><p>暗示线程调度器：本线程使用cpu的时间片剩余时间不想用了，分配时间片给其他线程。</p></li><li><p>线程调度器可以无视该暗示</p></li><li><p>本线程让出cpu后处于就绪状态，还参与cpu调度，线程调度器分配cpu给优先级最高的线程，下一个时间片可能还被分配给该线程</p></li></ol><p><em>yield()与sleep()的区别：</em></p><p>yield让出cpu，但出于就绪状态，参与cpu下一轮调度</p><p>sleep让出cpu，在指定时间之前都处于阻塞状态，不参与cpu调度</p><h2 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h2><ul><li>void interrupt()</li></ul><p>调用线程的interrupt()，给线程的中断标志设置为true，但线程并不会被中断，而是继续执行。</p><p>若该线程调用了wait(),join(),sleep()被阻塞挂起时再调用interrupt()会报interruptedException异常</p><ul><li>boolean isInterrupted()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> isInterrupted(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>判断线程是否被中断，不改变线程中断状态</p><ul><li>boolean interrupted()——–<font color="red">静态方法</font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> currenrThread.isInterrupted(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>判断线程是否被中断，若线程被中断则<font color="red">消除中断标志</font></p><h2 id="线程上下文切换"><a href="#线程上下文切换" class="headerlink" title="线程上下文切换"></a>线程上下文切换</h2><h3 id="时机："><a href="#时机：" class="headerlink" title="时机："></a>时机：</h3><ol><li>线程时间片使用完处于就绪状态</li><li>线程被其他线程中断</li></ol><h2 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;并发基础&quot;&gt;&lt;a href=&quot;#并发基础&quot; class=&quot;headerlink&quot; title=&quot;并发基础&quot;&gt;&lt;/a&gt;并发基础&lt;/h1&gt;&lt;h2 id=&quot;创建线程的三种方式&quot;&gt;&lt;a href=&quot;#创建线程的三种方式&quot; class=&quot;headerlink&quot; title=&quot;创建线程的三种方式&quot;&gt;&lt;/a&gt;创建线程的三种方式&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;extends Thread&lt;/li&gt;
&lt;li&gt;implements Runnable&lt;/li&gt;
&lt;li&gt;implements Callable&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;三种方式比较&quot;&gt;&lt;a href=&quot;#三种方式比较&quot; class=&quot;headerlink&quot; title=&quot;三种方式比较&quot;&gt;&lt;/a&gt;三种方式比较&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;继承实现：当前线程直接使用this，不需Thread.currentThread；Java只能单继承，任务与代码没有分离，没有返回值&lt;/li&gt;
&lt;li&gt;Runnable：多线程进行同一任务只需要一份代码；没有返回值&lt;/li&gt;
&lt;li&gt;Callable：有返回值
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="并发" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="书单" scheme="http://yoursite.com/tags/%E4%B9%A6%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>String.split()遇到空字符串的几种情况</title>
    <link href="http://yoursite.com/2020/06/09/String.split()%E9%81%87%E5%88%B0%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%87%A0%E7%A7%8D%E6%83%85%E5%86%B5/"/>
    <id>http://yoursite.com/2020/06/09/String.split()%E9%81%87%E5%88%B0%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%87%A0%E7%A7%8D%E6%83%85%E5%86%B5/</id>
    <published>2020-06-09T09:40:53.000Z</published>
    <updated>2020-09-03T12:21:34.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="String-split-遇到空字符串的几种情况"><a href="#String-split-遇到空字符串的几种情况" class="headerlink" title="String.split()遇到空字符串的几种情况"></a>String.split()遇到空字符串的几种情况</h1><p>今天突然工作中遇到这么个问题，文件中数据全都放在一行的时候，用split切割时空是统计不上的，让人很恼火，找了一下split函数的其他用法才知道了原因，咦咦咦。。。</p><a id="more"></a><p>Java中的我们可以利用split把字符串按照指定的分割符进行分割，然后返回字符串数组<br>   split 方法<br>      该方法的作用是：将一个字符串分割为子字符串，然后将结果作为字符串数组返回。<br>      stringObj.split([separator，[limit]])<br>       stringObj<br>             必选项。要被分解的 String 对象或文字,该对象不会被split方法修改。<br>       separator<br>            可选项。字符串或正则表达式对象，它标识了分隔字符串时使用的是一个还是多个字符。如果忽略该选项，返回包含整个字符串的单一元素数组。<br>       limit<br>            参数控制模式应用的次数，因此影响所得数组的长度。如果该限制 n 大于 0，则模式将被最多应用 n - 1 次，数组的长度将不会大于 n，而且数组的最后一项将包含所有超出最后匹配的定界符的输入。如果 n 为非正，那么模式将被应用尽可能多的次数，而且数组可以是任何长度。如果 n 为 0，那么模式将被应用尽可能多的次数，数组可以是任何长度，并且结尾空字符串将被丢弃。</p><p>会遇到以下几种情况：</p><p>1.空字符串不被解析</p><p>public class test {<br>    public static void main(String[] args) {<br>        String str = “1,2,3,4,,,”;<br>        String[] arr = str.split(“,”);<br>        for (String string : arr) {<br>            System.out.println(“str”+string);<br>        }<br>        System.out.println(arr.length);<br>    }<br>}</p><p>结果1：</p><p>2.最后一个分隔符被分的字符串不为空时，其余空字符串可被解析。</p><p>public class test {<br>    public static void main(String[] args) {<br>        String str = “1,2,3,4,,,5”;<br>        String[] arr = str.split(“,”);<br>        for (String string : arr) {<br>            System.out.println(“str”+string);<br>        }<br>        System.out.println(arr.length);<br>    }<br>}<br>结果2：</p><p>但是在实际开发的时候不能保证最后一个分隔符被分的字符串为不空，所以在用split()这个方法后再取被分隔的字符串数组的时候有时候就出现数据越界的问题（最后一个分隔符被分的字符串为空）<br>     想到了一个方法是split([separator，[limit]]) ，后面把limit赋值成比该字符串被分隔成字符数组后数组的长度大很多的值，这能保证所有为空的都能被解析，这正应了api里的解释：</p><p>3.如果该限制 n 大于 0，则模式将被最多应用 n - 1 次（此时n为1000）</p><p>public class test {<br>    public static void main(String[] args) {<br>        String str = “1,2,3,4,,,”;<br>        String[] s = str.split(“,”,1000);<br>        for (String string : s) {<br>            System.out.println(“str”+string);<br>        }<br>        System.out.println(s.length);<br>    }<br> 结果3：</p><p>4.如果把limit设置为非正，也能全部解析如：</p><p>public class test {<br>    public static void main(String[] args) {<br>        String str = “1,2,3,4,,,”;<br>        String[] s = str.split(“,”,-1);<br>        for (String string : s) {<br>            System.out.println(“str”+string);<br>        }<br>        System.out.println(s.length);<br>    }<br>}<br> 结果4：</p><p>当String str = “1,2,3,4,,,5”;时分别与上述结果3,4一致。</p><p>1.当参数为整数的时候，只需要截取前几个，需要几个截取几个，这个不用多说。 </p><p>Java代码<br>String line =  “aa,bb,cc,dd,,,,” ;<br>System.out.println(line.split( “,” , 6 ).length);<br>输出结果为 6 ,limit参数指定几个，输出几个，最多为 8 个  </p><p>2.当参数为零的时候，和split()一样，截图尽可能多的字符串(其实不是最多的)。<br>Java代码<br>String line =  “aa,bb,cc,dd,,,,” ;<br>System.out.println(line.split( “,” , 0 ).length);<br>输出结果为 4   </p><p>3.当参数为负的时候，即使后面有空的串，也会输出到最大<br>Java代码<br>String line =  “aa,bb,cc,dd,,,,” ;<br>System.out.println(line.split( “,” ,- 1 ).length);<br>输出结果为 8   </p><p>注意：<br>1、如果用“.”作为分隔的话,必须是如下写法,String.split(“\.”),这样才能正确的分隔开,不能用String.split(“.”);<br>2、如果用“|”作为分隔的话,必须是如下写法,String.split(“\|”),这样才能正确的分隔开,不能用String.split(“|”);</p><p>————————————————<br>版权声明：本文为CSDN博主「醉梦洛」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_39921821/java/article/details/89489031">https://blog.csdn.net/weixin_39921821/java/article/details/89489031</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;String-split-遇到空字符串的几种情况&quot;&gt;&lt;a href=&quot;#String-split-遇到空字符串的几种情况&quot; class=&quot;headerlink&quot; title=&quot;String.split()遇到空字符串的几种情况&quot;&gt;&lt;/a&gt;String.split()遇到空字符串的几种情况&lt;/h1&gt;&lt;p&gt;今天突然工作中遇到这么个问题，文件中数据全都放在一行的时候，用split切割时空是统计不上的，让人很恼火，找了一下split函数的其他用法才知道了原因，咦咦咦。。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>字符串到json 的错误 com.alibaba.fastjson.JSONObject cannot be cast to java.lang.String</title>
    <link href="http://yoursite.com/2020/06/07/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%B0json%20%E7%9A%84%E9%94%99%E8%AF%AF%20com.alibaba.fastjson.JSONObject%20cannot%20be%20cast%20to%20java.lang.String/"/>
    <id>http://yoursite.com/2020/06/07/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%B0json%20%E7%9A%84%E9%94%99%E8%AF%AF%20com.alibaba.fastjson.JSONObject%20cannot%20be%20cast%20to%20java.lang.String/</id>
    <published>2020-06-07T15:57:55.000Z</published>
    <updated>2020-06-13T03:48:13.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="符串到json-的错误-com-alibaba-fastjson-JSONObject-cannot-be-cast-to-java-lang-String"><a href="#符串到json-的错误-com-alibaba-fastjson-JSONObject-cannot-be-cast-to-java-lang-String" class="headerlink" title="符串到json 的错误 com.alibaba.fastjson.JSONObject cannot be cast to java.lang.String"></a>符串到json 的错误 com.alibaba.fastjson.JSONObject cannot be cast to java.lang.String</h1><p>map提取出来的对象不能转为String，而要通过它的方法 toString 来转化：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;符串到json-的错误-com-alibaba-fastjson-JSONObject-cannot-be-cast-to-java-lang-String&quot;&gt;&lt;a href=&quot;#符串到json-的错误-com-alibaba-fastjson-JSONObjec
      
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="bug" scheme="http://yoursite.com/tags/bug/"/>
    
      <category term="json" scheme="http://yoursite.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>我的hexo</title>
    <link href="http://yoursite.com/2020/06/07/%E6%88%91%E7%9A%84hexo%20/"/>
    <id>http://yoursite.com/2020/06/07/%E6%88%91%E7%9A%84hexo%20/</id>
    <published>2020-06-07T14:59:52.000Z</published>
    <updated>2020-06-13T03:47:14.522Z</updated>
    
    <content type="html"><![CDATA[<p>好早以前就试过了 hexo，不过一直就是建完站就不管了，前几天写写文章出现问题：<br>title:<br>‘object Object’:null<br>然后我就重新来了一遍，顺便记录</p><a id="more"></a><h1 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h1><ul><li><p>github 创建 用户名.github.io 的仓库，添加本机 ssh 公钥</p></li><li><p>本地安装 node</p></li><li><p>npm i -g hexo 安装 hexo</p></li><li><p>hexo init 自定义根目录/ | mkdir 自定义根目录 &amp;&amp; cd 自定义根目录 &amp;&amp; hexo init</p></li><li><p>把之前的 source/_posts/目录内文件 copy 到相同路径</p></li><li><p>修改_config.yml：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">    <span class="attribute">type</span>: git</span><br><span class="line">    <span class="attribute">repository</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:han1997/han1997.github.io.git</span><br><span class="line">    <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure></li><li><p>hexo c &amp;&amp; hexo g &amp;&amp; hexo d</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">报错：</span><br><span class="line">    <span class="built_in">ERROR</span> Deployer <span class="keyword">not</span> found: git</span><br><span class="line">原因：</span><br><span class="line">    npm install --<span class="keyword">save</span> hexo-deployer-git</span><br></pre></td></tr></table></figure></li></ul><h1 id="修改样式"><a href="#修改样式" class="headerlink" title="修改样式"></a>修改样式</h1><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><h3 id="site"><a href="#site" class="headerlink" title="site"></a>site</h3><ul><li>title 标签页显示的名字</li><li>subtitle: 副标题</li><li>description: 网站描述</li><li>keywords:</li><li>author: 作者</li><li>language: 语言</li><li>timezone: 网站时区</li></ul><h3 id="writing"><a href="#writing" class="headerlink" title="writing"></a>writing</h3><ul><li>post_asset_folder: true 文章文件夹，放图片之类</li></ul><h3 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h3><ul><li>theme: next</li></ul><h2 id="theme-next-config-yml"><a href="#theme-next-config-yml" class="headerlink" title="theme/next/_config.yml"></a>theme/next/_config.yml</h2><h3 id="menu-菜单"><a href="#menu-菜单" class="headerlink" title="menu 菜单"></a>menu 菜单</h3><h3 id="主题样式"><a href="#主题样式" class="headerlink" title="主题样式"></a>主题样式</h3><p>scheme: Gemini</p><h3 id="social-联系方式？"><a href="#social-联系方式？" class="headerlink" title="social 联系方式？"></a>social 联系方式？</h3><h3 id="toc-文章结构显示"><a href="#toc-文章结构显示" class="headerlink" title="toc 文章结构显示"></a>toc 文章结构显示</h3><h3 id="sidebar-侧栏设置"><a href="#sidebar-侧栏设置" class="headerlink" title="sidebar 侧栏设置"></a>sidebar 侧栏设置</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">sidebar:</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Sidebar Position - 侧栏位置（只对 Pisces | Gemini 两种风格有效）</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">position:</span> left <span class="comment">//靠左放置</span></span><br><span class="line"><span class="meta">#position: right <span class="comment">//靠右放置</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Sidebar Display - 侧栏显示时机（只对 Muse | Mist 两种风格有效）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#display: post <span class="comment">//默认行为，在文章页面（拥有目录列表）时显示</span></span></span><br><span class="line"><span class="symbol">display:</span> always <span class="comment">//在所有页面中都显示</span></span><br><span class="line"><span class="meta">#display: hide <span class="comment">//在所有页面中都隐藏（可以手动展开）</span></span></span><br><span class="line"><span class="meta">#display: remove <span class="comment">//完全移除</span></span></span><br><span class="line"></span><br><span class="line"><span class="symbol">offset:</span> <span class="number">12</span> <span class="comment">//文章间距（只对 Pisces | Gemini 两种风格有效）</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">b2t:</span> false <span class="comment">//返回顶部按钮（只对 Pisces | Gemini 两种风格有效）</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">scrollpercent:</span> true <span class="comment">//返回顶部按钮的百分比</span></span><br></pre></td></tr></table></figure><h3 id="Sidebar-Avatar"><a href="#Sidebar-Avatar" class="headerlink" title="Sidebar Avatar"></a>Sidebar Avatar</h3><p>avatar: /images/header.jpg<br>添加头像</p><p>###</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><h2 id="添加分类模块"><a href="#添加分类模块" class="headerlink" title="添加分类模块"></a>添加分类模块</h2><ol><li><p>新建一个分类页面</p><p><code>$ hexo new page categories</code></p></li><li><p>你会发现你的 source 文件夹下有了 categorcies/index.md，打开 index.md 文件将 title 设置为 title: 分类,加上 type: “categories”</p></li><li><p>打开 主题配置文件 找到 menu，将 categorcies 取消注释</p></li><li><p>把文章归入分类只需在文章的顶部标题下方添加 categories 字段，即可自动创建分类名并加入对应的分类中</p></li></ol><h2 id="添加标签模块"><a href="#添加标签模块" class="headerlink" title="添加标签模块"></a>添加标签模块</h2><ol><li><p>新建一个标签页面</p><p><code>$ hexo new page tags</code></p></li><li><p>你会发现你的 source 文件夹下有了 tags/index.md，打开 index.md 文件将 title 设置为 title: 标签，加上 type: “tags”</p></li><li><p>打开 主题配置文件 找到 menu，将 tags 取消注释</p></li><li><p>把文章添加标签只需在文章的顶部标题下方添加 tags 字段，即可自动创建标签名并归入对应的标签中</p></li></ol><h2 id="添加关于模块"><a href="#添加关于模块" class="headerlink" title="添加关于模块"></a>添加关于模块</h2><ol><li><p>新建一个关于页面</p><p><code>$ hexo new page about</code></p></li><li><p>你会发现你的 source 文件夹下有了 about/index.md，打开 index.md 文件即可编辑关于你的信息，可以随便编辑。</p></li><li><p>打开 主题配置文件 找到 menu，将 about 取消注释</p></li></ol><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><ol><li>安装插件：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">search</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure><ol><li>修改站点配置文件_config.yml</li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">search:</span></span><br><span class="line"><span class="symbol">  path:</span> .<span class="meta-keyword">/public/</span>search.xml</span><br><span class="line"><span class="symbol">  field:</span> post</span><br><span class="line"><span class="symbol">  format:</span> html</span><br><span class="line"><span class="symbol">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><ol><li>修改主题配置文件 theme/next/_config.yml</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line"><span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line"><span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line"><span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line"><span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="添加阅读全文按钮"><a href="#添加阅读全文按钮" class="headerlink" title="添加阅读全文按钮"></a>添加阅读全文按钮</h2><p>因为在你的博客主页会有多篇文章，如果你想让你的文章只显示一部分，多余的可以点击阅读全文来查看，那么你需要在你的文章中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure><p>其后面的部分就不会显示了，只能点击阅读全文才能看</p><h2 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h2><p>打开文件 themes/next/source/css/_common/components/post/post.styl，在末尾添加</p><p><code>.post-body p a &#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125; &#125;</code><br>其中选择 .post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p><h2 id="设置网站缩略图标"><a href="#设置网站缩略图标" class="headerlink" title="设置网站缩略图标"></a>设置网站缩略图标</h2><p>把 favicon.ico 放到站点目录的 source 目录下</p><h2 id="设置-RSS"><a href="#设置-RSS" class="headerlink" title="设置 RSS"></a>设置 RSS</h2><ol><li>先安装 hexo-generator-feed 插件</li></ol><blockquote><p>npm install hexo-generator-feed –save</p></blockquote><ol><li>打开 站点配置文件 找到 Extensions 在下面添加</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RSS 订阅</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">hub:</span></span><br><span class="line"><span class="attr">content:</span></span><br><span class="line"><span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line"><span class="attr">content_limit_delim:</span> <span class="string">&#x27; &#x27;</span></span><br></pre></td></tr></table></figure><ol><li><p>打开 主题配置文件 找到 rss，设置为</p><blockquote><p>rss: /atom.xml</p></blockquote></li></ol><h2 id="添加评论系统"><a href="#添加评论系统" class="headerlink" title="添加评论系统"></a>添加评论系统</h2><ol><li>进入友言官网注册、登录步骤我就不介绍了</li><li>登录完成之后，点击获取代码，你会发现出来了一段代码，里面有你的 uid=1234567</li><li>打开 主题配置文件 找到 youyan_uid 将值设置为上面的 uid 就可以了</li></ol><h2 id="添加站点访问计数"><a href="#添加站点访问计数" class="headerlink" title="添加站点访问计数"></a>添加站点访问计数</h2><p>不蒜子<a href="http://busuanzi.ibruce.info]/">[http://busuanzi.ibruce.info]</a></p><ol><li>安装脚本<br>打开 themes/next/layout/_partial/footer.swig，将下面这段代码添加到里面</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_pv&quot;</span> <span class="attr">style</span>=<span class="string">&#x27;display:none&#x27;</span>&gt;</span></span><br><span class="line">  本站总访问量 <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 次</span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_uv&quot;</span> <span class="attr">style</span>=<span class="string">&#x27;display:none&#x27;</span>&gt;</span></span><br><span class="line">  有<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>人看过我的博客啦</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加的位置如下图，可自行根据个人喜好更换位置</p><ol><li>以上只是显示站点的访问次数，如果想显示每篇文章的访问次数，打开 themes/next/layout/_macro/post.swig，在第一行增加 is_pv 字段</li></ol><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">`</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">macro</span></span> render(post, is_index, is_pv, post_extra_class) %&#125;</span><span class="xml">`</span></span><br><span class="line"></span><br><span class="line"><span class="xml">然后将这段代码插入到里面</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> is_pv %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span>`</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_page_pv&quot;</span>&gt;</span>`</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次阅读 </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><p>插入的位置</p><p>然后再打开 themes/next/layout/post.swig，这个文件是文章的模板，给 render 方法传入参数（对应刚才添加的 is_pv 字段）<br>最后再打开 themes/next/layout/index.swig，这个文件是首页的模板，给 render 方法传入参数（对应刚才添加的 is_pv 字段）<br>OK！设置完毕。</p><h2 id="去掉文章目录标题的自动编号"><a href="#去掉文章目录标题的自动编号" class="headerlink" title="去掉文章目录标题的自动编号"></a>去掉文章目录标题的自动编号</h2><p>我们自己写文章的时候一般都会自己带上标题编号，但是默认的主题会给我们带上编号，很是别扭，如何去掉呢？<br>打开主题配置文件，找到将 number 改为 false 即可</p><h2 id="添加-cdn-加速"><a href="#添加-cdn-加速" class="headerlink" title="添加 cdn 加速"></a>添加 cdn 加速</h2><p>vendors 下取消注释即可</p><h2 id="网站动态元素延时加载"><a href="#网站动态元素延时加载" class="headerlink" title="网站动态元素延时加载"></a>网站动态元素延时加载</h2><p>motion:<br>enable:false</p><p>我还打开了，不记得在哪里看到的了<br>背景有效果了<br>canvas_nest:<br>enable: true</p><h2 id="增加文章置顶功能"><a href="#增加文章置顶功能" class="headerlink" title="增加文章置顶功能"></a>增加文章置顶功能</h2><p>修改 hero-generator-index 插件，把文件：node_modules/hexo-generator-index/lib/generator.js 内的代码替换为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">&#x27;hexo-pagination&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="built_in">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">&#x27;page&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">&#x27;&#x27;</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;archive&#x27;</span>],</span><br><span class="line">    format: paginationDir + <span class="string">&#x27;/%d/&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在文章中添加 top 值，数值越大文章越靠前，如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">解决Charles乱码问题</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017-05-22 22:45:48</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">技巧</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">技巧</span></span><br><span class="line"><span class="attr">copyright:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">top:</span> <span class="number">100</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p><strong>少量图片</strong><br>当 Hexo 项目中只用到少量图片时，可以将图片统一放在 source/images 文件夹中，通过 markdown 语法访问它们。对于 source/images/image.jpg 这张图片可以用以下语法访问到<br><code>![](/images/image.jpg)</code></p><p><strong>大量图片</strong><br>修改_config.yml 配置文件 post_asset_folder 项为 true。<br>在 source/_post 文件夹里面就会出现一个“这是一个新的博客.md”的文件和一个“这是一个新的博客”的文件夹。<br>把需要的图片放到新创建的那个文件夹里面去。</p><p>``</p><h2 id="设置文章字体的颜色、大小"><a href="#设置文章字体的颜色、大小" class="headerlink" title="设置文章字体的颜色、大小"></a>设置文章字体的颜色、大小</h2><p>如果想设置某一句的颜色或大小，只需用 html 语法写出来就行了</p><p>我可以设置这一句的颜色哈哈</p><p>我还可以设置这一句的大小嘻嘻</p><p>我甚至可以设置这一句的颜色和大小呵呵</p><h2 id="设置文字居中"><a href="#设置文字居中" class="headerlink" title="设置文字居中"></a>设置文字居中</h2><p>居中</p><p>借鉴原文[<a href="http://www.360doc.com/content/19/0418/20/22888630_829741117.shtml]">http://www.360doc.com/content/19/0418/20/22888630_829741117.shtml]</a><br>借鉴原文[<a href="https://blog.csdn.net/nightmare_dimple/article/details/86661505]">https://blog.csdn.net/nightmare_dimple/article/details/86661505]</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好早以前就试过了 hexo，不过一直就是建完站就不管了，前几天写写文章出现问题：&lt;br&gt;title:&lt;br&gt;‘object Object’:null&lt;br&gt;然后我就重新来了一遍，顺便记录&lt;/p&gt;
    
    </summary>
    
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>算法的时间复杂度与空间复杂度</title>
    <link href="http://yoursite.com/2020/06/07/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%8E%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%20/"/>
    <id>http://yoursite.com/2020/06/07/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%8E%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%20/</id>
    <published>2020-06-07T14:58:12.000Z</published>
    <updated>2020-06-13T03:47:08.635Z</updated>
    
    <content type="html"><![CDATA[<p>摘录地址[<a href="https://blog.csdn.net/jsjwk/article/details/84315770]">https://blog.csdn.net/jsjwk/article/details/84315770]</a></p><p>算法（Algorithm）是指用来操作数据、解决程序问题的一组方法。</p><p>如何去衡量不同算法之间的优劣呢？</p><ul><li>时间维度：是指执行当前算法所消耗的时间，我们通常用「时间复杂度」来描述。</li><li>空间维度：是指执行当前算法需要占用多少内存空间，我们通常用「空间复杂度」来描述。</li></ul><p>评价一个算法的效率主要是看它的时间复杂度和空间复杂度情况。然而，有的时候时间和空间却又是「鱼和熊掌」，不可兼得的，那么我们就需要从中去取一个平衡点。</p><a id="more"></a><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><blockquote><p>「 大 O 符号表示法 」，即 T(n) = O(f(n))</p></blockquote><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">i</span>=<span class="number">1</span>; <span class="built_in">i</span>&lt;=n; ++<span class="built_in">i</span>)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">j</span> = <span class="built_in">i</span>;</span><br><span class="line">   <span class="built_in">j</span>++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 f(n) 表示每行代码执行次数之和，而 O 表示正比例关系，这个公式的全称是：算法的渐进时间复杂度。</p><p>假设每行代码的执行时间都是一样的，我们用 1 颗粒时间 来表示，那么这个例子的第一行耗时是 1 个颗粒时间，第三行的执行时间是 n 个颗粒时间，第四行的执行时间也是 n 个颗粒时间（第二行和第五行是符号，暂时忽略），那么总时间就是 1 颗粒时间 + n 颗粒时间 + n 颗粒时间 ，即 (1+2n)个颗粒时间，即： T(n) = (1+2n)*颗粒时间，从这个结果可以看出，这个算法的耗时是随着 n 的变化而变化，因此，我们可以简化的将这个算法的时间复杂度表示为：T(n) = O(n)</p><p>大 O 符号表示法并不是用于来真实代表算法的执行时间的，它是用来表示代码执行时间的增长变化趋势的。</p><p>所以上面的例子中，如果 n 无限大的时候，T(n) = time(1+2n)中的常量 1 就没有意义了，倍数 2 也意义不大。因此直接简化为 T(n) = O(n) 就可以了。</p><ul><li>常见的时间复杂度量级有：</li><li>常数阶 O(1)</li><li>对数阶 O(logN)</li><li>线性阶 O(n)</li><li>线性对数阶 O(nlogN)</li><li>平方阶 O(n²)</li><li>立方阶 O(n³)</li><li>K 次方阶 O(n^k)</li><li>指数阶(2^n)</li></ul><p>上面从上至下依次的时间复杂度越来越大，执行的效率越来越低。</p><h2 id="常数阶-O-1"><a href="#常数阶-O-1" class="headerlink" title="常数阶 O(1)"></a>常数阶 O(1)</h2><p>只要是没有循环等复杂结构，那这个代码的时间复杂度就都是 O(1)</p><h2 id="线性阶-O-n"><a href="#线性阶-O-n" class="headerlink" title="线性阶 O(n)"></a>线性阶 O(n)</h2><p>(1 个)for 循环里面的代码会执行 n 遍，因此它消耗的时间是随着 n 的变化而变化的，因此这类代码都可以用 O(n)来表示它的时间复杂度。</p><h2 id="对数阶-O-logN"><a href="#对数阶-O-logN" class="headerlink" title="对数阶 O(logN)"></a>对数阶 O(logN)</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int <span class="built_in">i</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">i</span>&lt;n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">i</span> = <span class="built_in">i</span> * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 while 循环里面，每次都将 i 乘以 2，乘完之后，i 距离 n 就越来越近了。我们试着求解一下，假设循环 x 次之后，i 就大于 2 了，此时这个循环就退出了，也就是说 2 的 x 次方等于 n，那么 x = log2^n<br>也就是说当循环 log2^n 次以后，这个代码就结束了。因此这个代码的时间复杂度为：O(logn)</p><h2 id="线性对数阶-O-nlogN"><a href="#线性对数阶-O-nlogN" class="headerlink" title="线性对数阶 O(nlogN)"></a>线性对数阶 O(nlogN)</h2><p>线性对数阶 O(nlogN) 其实非常容易理解，将时间复杂度为 O(logn)的代码循环 N 遍的话，那么它的时间复杂度就是 n * O(logN)，也就是了 O(nlogN)。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(m=<span class="number">1</span>; m&lt;n; m++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">i</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">i</span>&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">i</span> = <span class="built_in">i</span> \* <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="平方阶-O-n²"><a href="#平方阶-O-n²" class="headerlink" title="平方阶 O(n²)"></a>平方阶 O(n²)</h2><p>如果把 O(n) 的代码再嵌套循环一遍，它的时间复杂度就是 O(n²) 了。<br>举例：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(x=<span class="number">1</span>; <span class="built_in">i</span>&lt;=n; x++)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="built_in">i</span>=<span class="number">1</span>; <span class="built_in">i</span>&lt;=n; <span class="built_in">i</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">j</span> = <span class="built_in">i</span>;</span><br><span class="line">       <span class="built_in">j</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码其实就是嵌套了 2 层 n 循环，它的时间复杂度就是 O(n*n)，即 O(n²)</p><h2 id="立方阶-O-n³-、K-次方阶-O-n-k"><a href="#立方阶-O-n³-、K-次方阶-O-n-k" class="headerlink" title="立方阶 O(n³)、K 次方阶 O(n^k)"></a>立方阶 O(n³)、K 次方阶 O(n^k)</h2><p>O(n³)相当于三层 n 循环，其它的类似</p><h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><p>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的一个量度，同样反映的是一个趋势，我们用 S(n) 来定义。</p><p>空间复杂度比较常用的有：O(1)、O(n)、O(n²)，我们下面来看看：</p><h2 id="空间复杂度-O-1"><a href="#空间复杂度-O-1" class="headerlink" title="空间复杂度 O(1)"></a>空间复杂度 O(1)</h2><p>如果算法执行所需要的临时空间不随着某个变量 n 的大小而变化，即此算法空间复杂度为一个常量，可表示为 O(1)<br>举例：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int <span class="built_in">i</span> = <span class="number">1</span>;</span><br><span class="line">int <span class="built_in">j</span> = <span class="number">2</span>;</span><br><span class="line">++<span class="built_in">i</span>;</span><br><span class="line"><span class="built_in">j</span>++;</span><br><span class="line">int m = <span class="built_in">i</span> + <span class="built_in">j</span>;</span><br></pre></td></tr></table></figure><p>代码中的 i、j、m 所分配的空间都不随着处理数据量变化，因此它的空间复杂度 S(n) = O(1)</p><h2 id="空间复杂度-O-n"><a href="#空间复杂度-O-n" class="headerlink" title="空间复杂度 O(n)"></a>空间复杂度 O(n)</h2><p>我们先看一个代码：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int[] m = new int[n]</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">i</span>=<span class="number">1</span>; <span class="built_in">i</span>&lt;=n; ++<span class="built_in">i</span>)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">j</span> = <span class="built_in">i</span>;</span><br><span class="line">   <span class="built_in">j</span>++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中，第一行 new 了一个数组出来，这个数据占用的大小为 n，这段代码的 2-6 行，虽然有循环，但没有再分配新的空间，因此，这段代码的空间复杂度主要看第一行即可，即 S(n) = O(n)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘录地址[&lt;a href=&quot;https://blog.csdn.net/jsjwk/article/details/84315770]&quot;&gt;https://blog.csdn.net/jsjwk/article/details/84315770]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;算法（Algorithm）是指用来操作数据、解决程序问题的一组方法。&lt;/p&gt;
&lt;p&gt;如何去衡量不同算法之间的优劣呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间维度：是指执行当前算法所消耗的时间，我们通常用「时间复杂度」来描述。&lt;/li&gt;
&lt;li&gt;空间维度：是指执行当前算法需要占用多少内存空间，我们通常用「空间复杂度」来描述。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;评价一个算法的效率主要是看它的时间复杂度和空间复杂度情况。然而，有的时候时间和空间却又是「鱼和熊掌」，不可兼得的，那么我们就需要从中去取一个平衡点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="时间复杂度" scheme="http://yoursite.com/tags/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>数组实现邻接表</title>
    <link href="http://yoursite.com/2020/06/07/%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0%E9%82%BB%E6%8E%A5%E8%A1%A8%20/"/>
    <id>http://yoursite.com/2020/06/07/%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0%E9%82%BB%E6%8E%A5%E8%A1%A8%20/</id>
    <published>2020-06-07T14:58:10.000Z</published>
    <updated>2020-06-13T03:47:03.901Z</updated>
    
    <content type="html"><![CDATA[<p>图有邻接矩阵存储法，时间和空间复杂度都是 N2，还有另一种存储图的方法-邻接表，它的时间和空间复杂度都是 m。对于稀疏图来说，m 要远远小于 n 的平方。</p><p>tip:</p><p>边数 M &lt; 顶点数 N^2 –&gt;稀疏图 –&gt;可用邻接表<br>边数 M &gt; 顶点数 N^2 –&gt;稠密图</p><h1 id="数据："><a href="#数据：" class="headerlink" title="数据："></a>数据：</h1><a id="more"></a><p>输入:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span> <span class="number">9</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">3</span> <span class="number">8</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">4</span> <span class="number">6</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">7</span></span><br></pre></td></tr></table></figure><p>第 1 行，两个整数 n,m，N 表示顶点个数，顶点编号为 1~n，m 表示边的个数。接下来 m 行表示每行有三个数，xyz 表示顶点 x 到顶点 y 的边的权值为 z。</p><p>按照读入的顺序为每一条边进行编号，1~m。比如第 1 条边 149 的编号就是 1， 137 这条边的编号是 5。</p><p>用 uvw 三个数组来记录每条边的具体信息。U[i]v[i] 和 w[i] 表示第 i 边是从第 u[i] 号顶点到 v[i] 号顶点，权值为 w[i]。</p><p>再用一个 first 数组来存储每个顶点其中(任意)一条边的编号。以便将来我们枚举每个顶点所有的边。比如 1 号顶点有一条边是 149，那么就将 first1 的值设为 1。如果某个顶点没有以该顶点为起始点的边，则将 first[i] 的值设为-1。</p><p>读入第 1 条边 149，将这条边的信息存储到 u[1],v[1],w[1] 中。同时为这条边赋予一个编号，因为这条边是最先读入的，存储在 u,v 和 w 数组下标为 1 的单元格中，因此编号就是 1。这条边的起始点是 1 号顶点，因此将 first[1] 的值设为 1。</p><p>这条编号为 1 的边是以 1 号顶点为起始点的第 1 条边，所以要将 next[1] 的值设为-1。也就是说如果当前这条编号为 i 的边，是我们发现的以 u[i] 为起点的第 1 条边就将 next [i] 的值设为-1。</p><p>读入第 2 条边 438，将这条边的信息存储到 u[2],v[2] 和 w[2]中，这条边的编号为 2，这条边的起始顶点是 4 号顶点，因此将 first[4] 的值设为 2，另外这条编号为 2 的边是我们发现以 4 号起点为起始点的第 1 条边，所以将 next[2] 的值设为-1。</p><p>读入第 3 条边 125，将这条边的信息存储到 u[3]v[3] 和 w[3]中，这条边的编号为 3，起始顶点是 1 号顶点，我们发现 1 号顶点已经有一条编号为一的边了，如果此时将 first[1] 的值设为 3 那编号唯一的边岂不是丢失了，此时只需将 next[3] 的值设为 1。</p><p><strong><em>Next 数组存储的是编号为 i 的边的前一条边的编号\</em></strong></p><p>读入第 4 条边 246，将这条边的信息存储到 u[4]v[4] 和 w[4]中，这条边的编号为 4，起始顶点是 2 号顶点，因此将 first[2] 的值设为 4，另外这条编号为 4 的边是我们发现以 2 号顶点为起始点的第 1 条边，所以将 next[4] 的值设为-1。</p><p>读入第 5 条边 137，将这条边的信息存储到 u[5]v[5] 和 w[5]中，这条边的编号为 5，起始顶点又是 1 号顶点，此时需要将 first[1] 的值设为 5，并将 next[5] 的值改为 3。</p><p>1 号顶点的其中一条边的编号存储在 first 一中，其余的边可以通过 next 数组找到。</p><p><strong><em>此时遍历某个顶点边的时候的遍历顺序，正好与读入时候的顺序相反。因为在为每个顶点插入边的时候，都是直接插入链表的手部，而不是尾部。\</em></strong></p><p>创建连接表的代码：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> n,m,i;</span><br><span class="line"><span class="comment">//u、v和w的数组大小要根据实际情况来设置，要比m的最大值要大1</span></span><br><span class="line"><span class="built_in">int</span> u[<span class="number">6</span>],v[<span class="number">6</span>],w[<span class="number">6</span>];</span><br><span class="line"><span class="comment">//first和next的数组大小要根据实际情况来设置，要比n的最大值要大1</span></span><br><span class="line"><span class="built_in">int</span> first[<span class="number">5</span>],next[<span class="number">5</span>];</span><br><span class="line">scanf(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="comment">//初始化first数组下标1~n的值为-1，表示1~n顶点暂时都没有边</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    first[i]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">    scanf(<span class="string">&quot;%d %d %d&quot;</span>,&amp;u[i],&amp;v[i],&amp;w[i]);<span class="comment">//读入每一条边</span></span><br><span class="line">    <span class="comment">//下面两句是关键啦</span></span><br><span class="line">    next[i]=first[u[i]];</span><br><span class="line">    first[u[i]]=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历 1 号顶点所有边的代码:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">k=first[<span class="number">1</span>];<span class="regexp">//</span> <span class="number">1</span>号顶点其中的一条边的编号（其实也是最后读入的边）</span><br><span class="line"><span class="keyword">while</span>(k!=-<span class="number">1</span>) <span class="regexp">//</span>其余的边都可以在<span class="keyword">next</span>数组中依次找到</span><br><span class="line">&#123;</span><br><span class="line">    printf(<span class="string">&quot;%d %d %d\n&quot;</span>,u[k],v[k],w[k]);</span><br><span class="line">    k=<span class="keyword">next</span>[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历每个顶点的所有边的代码:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="attribute">i</span>=1;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">k</span>=first[i];</span><br><span class="line">    <span class="keyword">while</span>(k!=-1)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">&quot;%d %d %d\n&quot;</span>,u[k],v[k],w[k]);</span><br><span class="line">        <span class="attribute">k</span>=next[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考原文[<a href="http://developer.51cto.com/art/201404/435072.htm]">http://developer.51cto.com/art/201404/435072.htm]</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图有邻接矩阵存储法，时间和空间复杂度都是 N2，还有另一种存储图的方法-邻接表，它的时间和空间复杂度都是 m。对于稀疏图来说，m 要远远小于 n 的平方。&lt;/p&gt;
&lt;p&gt;tip:&lt;/p&gt;
&lt;p&gt;边数 M &amp;lt; 顶点数 N^2 –&amp;gt;稀疏图 –&amp;gt;可用邻接表&lt;br&gt;边数 M &amp;gt; 顶点数 N^2 –&amp;gt;稠密图&lt;/p&gt;
&lt;h1 id=&quot;数据：&quot;&gt;&lt;a href=&quot;#数据：&quot; class=&quot;headerlink&quot; title=&quot;数据：&quot;&gt;&lt;/a&gt;数据：&lt;/h1&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="邻接表" scheme="http://yoursite.com/tags/%E9%82%BB%E6%8E%A5%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>启动MySQL遇到错误</title>
    <link href="http://yoursite.com/2020/06/07/%E5%90%AF%E5%8A%A8MySQL%E9%81%87%E5%88%B0%E9%94%99%E8%AF%AF%20/"/>
    <id>http://yoursite.com/2020/06/07/%E5%90%AF%E5%8A%A8MySQL%E9%81%87%E5%88%B0%E9%94%99%E8%AF%AF%20/</id>
    <published>2020-06-07T14:58:00.000Z</published>
    <updated>2020-06-13T03:46:24.050Z</updated>
    
    <content type="html"><![CDATA[<p>具体情况：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ mysql -uroot -p</span><br><span class="line">Enter password:</span><br><span class="line"><span class="keyword">ERROR </span>2002 (HY000): Can&#x27;t connect to local MySQL server through socket &#x27;/tmp/mysql.sock&#x27; (2)</span><br></pre></td></tr></table></figure><a id="more"></a><p>解决：转载博客—-&gt;</p><blockquote><p>只是前几天将 Mac 的系统升级到了 10.14.2 顺着提示的错误进入到 tmp 文件夹发现没有 mysql.sock 文件,最后查询发现有人说道可能是因为：mac 系统版本的问题.因为 Mac OS X 的升级或其他原因会导致Ｍ ySQL 启动或开机自动运行时/usr/local/mysql/data 的宿主发生了改变，没有了这个文件夹的权限了。<br>在终端输入，并输入 root 密码：</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R mysql <span class="regexp">/usr/</span>local<span class="regexp">/mysql/</span>data</span><br></pre></td></tr></table></figure><p>此时进入到 tmp 下会自动生成 mysql.sock</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  / tmp</span><br><span class="line">➜  /tmp ls</span><br><span class="line">AlTest1<span class="selector-class">.err</span>                  mysql<span class="selector-class">.sock</span>.lock</span><br><span class="line">AlTest1<span class="selector-class">.out</span>                  mysqlx.sock</span><br><span class="line">com<span class="selector-class">.apple</span><span class="selector-class">.launchd</span><span class="selector-class">.JzjnOhtY6W</span> mysqlx<span class="selector-class">.sock</span>.lock</span><br><span class="line">com<span class="selector-class">.apple</span><span class="selector-class">.launchd</span><span class="selector-class">.W2xJKVPDzB</span> powerlog</span><br><span class="line">mysql.sock</span><br></pre></td></tr></table></figure><hr><p>作者：zhangvalue<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/zhangvalue/article/details/89310982">https://blog.csdn.net/zhangvalue/article/details/89310982</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;具体情况：&lt;/p&gt;
&lt;figure class=&quot;highlight subunit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~ mysql -uroot -p&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Enter password:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ERROR &lt;/span&gt;2002 (HY000): Can&amp;#x27;t connect to local MySQL server through socket &amp;#x27;/tmp/mysql.sock&amp;#x27; (2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
</feed>
